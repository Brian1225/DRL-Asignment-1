  0%|                                                                                                                              | 0/10000 [00:00<?, ?it/s]/home/chunyulin/Desktop/DRL/DRL-Asignment-1/utils.py:49: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
tensor([2., 3., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
  torch.tensor(state, dtype=torch.float32).to(self.device),
/home/chunyulin/Desktop/DRL/DRL-Asignment-1/utils.py:52: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(next_state, dtype=torch.float32).to(self.device),
tensor([3., 3., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 3., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 3., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 2., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 2., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([3., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([2., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([2., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 0., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([0., 1., 0., 0., 0., 4., 4., 0., 4., 4., 1., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 2., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 2., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
tensor([1., 1., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')
tensor([1., 0., 0., 0., 0., 4., 4., 0., 4., 4., 0., 0., 0., 1., 0., 0.],
       device='cuda:0')
  0%|                                                                                                                              | 0/10000 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 136, in <module>
    main()
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 132, in main
    trainer.train(args)
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 94, in train
    if self.args.use_wandb:
AttributeError: 'DQNAgentTrainer' object has no attribute 'args'
Traceback (most recent call last):
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 136, in <module>
    main()
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 132, in main
    trainer.train(args)
  File "/home/chunyulin/Desktop/DRL/DRL-Asignment-1/train.py", line 94, in train
    if self.args.use_wandb:
AttributeError: 'DQNAgentTrainer' object has no attribute 'args'
